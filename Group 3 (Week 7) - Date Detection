import re

def is_valid_date(date_str):
    match = re.match(r'(0[1-9]|[12][0-9]|3[01])/(0[1-9]|1[0-2])/(1\d{3}|2\d{3})', date_str)
    if not match:
        return False

    day, month, year = int(match.group(1)), int(match.group(2)), int(match.group(3))

    # Days per month
    days_in_month = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31,
                     8: 31, 9: 30, 10: 31, 11: 30, 12: 31}

    # Leap year check
    if month == 2 and ((year % 4 == 0 and year % 100 != 0) or (year % 400 == 0)):
        days_in_month[2] = 29

    return 1 <= day <= days_in_month.get(month, 0)
    
test_dates = [
    ("29/02/2024", True),
    ("29/02/2023", False),
    ("31/04/2023", False),
    ("30/06/2022", True),
    ("01/01/2000", True),
    ("31/12/2999", True),
    ("00/12/2023", False),
    ("15/13/2023", False),
    ("32/01/2023", False),
    ("abc/ef/ghij", False)
]

for date, expected in test_dates:
    result = is_valid_date(date)
    print(f"Testing {date}: {'PASS' if result == expected else 'FAIL'}")
